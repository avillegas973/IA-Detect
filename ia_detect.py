# -*- coding: utf-8 -*-
"""IA Detect.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QutnL0dauNCow3NUR0MGQ_i2WCI6sSx_
"""

# Instalación de dependencias
!pip install python-docx textstat matplotlib fpdf transformers nltk -q
!pip install torch torchvision torchaudio -q
!python -m nltk.downloader punkt averaged_perceptron_tagger

# Importación de librerias
from google.colab import files
from docx import Document
import textstat
import matplotlib.pyplot as plt
from fpdf import FPDF
import nltk
from nltk import sent_tokenize
from transformers import GPT2LMHeadModel, GPT2TokenizerFast
import torch
import numpy as np
import os

# Carga de documentos
print("Carga tu archivo .docx")
uploaded = files.upload()
file_path = list(uploaded.keys())[0]

def read_docx(path):
    doc = Document(path)
    return "\n".join([p.text for p in doc.paragraphs if p.text.strip()])

texto = read_docx(file_path)
print("\nDocumento cargado. Muestra:\n")
print(texto[:500])

# Obtener metricas de legibilidad
def analizar_texto(txt):
    return {
        "longitud_total_caracteres": len(txt),
        "palabras_totales": textstat.lexicon_count(txt, removepunct=True),
        "oraciones_totales": textstat.sentence_count(txt),
        "longitud_prom_oracion": textstat.words_per_sentence(txt),
        "flesch_reading_ease": textstat.flesch_reading_ease(txt),
        "grado_flesch_kincaid": textstat.flesch_kincaid_grade(txt),
        "indice_gunning_fog": textstat.gunning_fog(txt),
        "indice_smog": textstat.smog_index(txt)
    }

metricas = analizar_texto(texto)

# Evaluación del texto
def calcular_perplejidad(text, model, tokenizer):
    inputs = tokenizer(text, return_tensors="pt", truncation=True, max_length=512)
    with torch.no_grad():
        outputs = model(**inputs, labels=inputs["input_ids"])
    loss = outputs.loss
    return torch.exp(loss).item()

def evaluar_estilo_turnitin(txt):
    model = GPT2LMHeadModel.from_pretrained("gpt2")
    tokenizer = GPT2TokenizerFast.from_pretrained("gpt2")
    model.eval()

    sentencias = sent_tokenize(txt)
    if len(sentencias) < 3:
        return {"error": "Texto demasiado corto para análisis profundo."}

    longitudes = [len(s.split()) for s in sentencias]
    burstiness = np.std(longitudes)
    avg_len = np.mean(longitudes)

    sample = " ".join(sentencias[:10])
    perplejidad = calcular_perplejidad(sample, model, tokenizer)

    score = 0
    if perplejidad < 50: score += 1
    if avg_len > 20: score += 1
    if burstiness < 5: score += 1

    riesgo = ["Bajo", "Medio", "Alto"][min(score, 2)]
    porcentaje = (score / 3) * 100

    return {
        "perplejidad": round(perplejidad, 2),
        "burstiness": round(burstiness, 2),
        "long_prom_sentencia": round(avg_len, 2),
        "riesgo_IA": riesgo,
        "porcentaje_riesgo": f"{porcentaje:.1f}%"
    }

resultado_turnitin = evaluar_estilo_turnitin(texto)

# Gráfica de metricas de legibilidad
plt.figure(figsize=(10, 6))
plt.barh(
    ['Flesch Reading Ease', 'Flesch-Kincaid', 'Gunning Fog', 'SMOG Index', 'Palabras x oración'],
    [metricas['flesch_reading_ease'], metricas['grado_flesch_kincaid'],
     metricas['indice_gunning_fog'], metricas['indice_smog'],
     metricas['longitud_prom_oracion']]
)
# Agregar etiquetas de valor a cada barra horizontal
valores = [metricas['flesch_reading_ease'], metricas['grado_flesch_kincaid'],
           metricas['indice_gunning_fog'], metricas['indice_smog'],
           metricas['longitud_prom_oracion']]
etiquetas = ['Flesch Reading Ease', 'Flesch-Kincaid', 'Gunning Fog', 'SMOG Index', 'Palabras x oración']
for i, v in enumerate(valores):
    plt.text(v + 0.5, i, f"{v:.2f}", va='center')

plt.xlabel("Valor")
plt.title("Métricas de Legibilidad del Texto")
plt.tight_layout()
plt.savefig("grafica_metricas_legibilidad.png")
plt.close()

# Gráficas de IA
labels = ['Perplejidad', 'Burstiness', 'Longitud oración']
values = [resultado_turnitin['perplejidad'],
          resultado_turnitin['burstiness'],
          resultado_turnitin['long_prom_sentencia']]

plt.figure(figsize=(8, 5))
plt.bar(labels, values)

# Agregar etiquetas de valor encima de las barras
for i, v in enumerate(values):
    plt.text(i, v + 0.5, f"{v:.2f}", ha='center')
plt.title("Indicadores de IA")
plt.ylabel("Valor")
plt.tight_layout()
plt.savefig("grafica_ia.png")
plt.close()

# Generar informe en PDF
pdf = FPDF()
pdf.add_page()
pdf.set_font("Arial", 'B', 16)
pdf.cell(0, 10, "Informe de Análisis de Texto", ln=True, align="C")

pdf.set_font("Arial", '', 12)
pdf.ln(10)
pdf.cell(0, 10, "Metricas de legibilidad:", ln=True)
for k, v in metricas.items():
    pdf.cell(0, 10, f"{k.replace('_', ' ').capitalize()}: {v}", ln=True)

pdf.ln(5)
pdf.image("grafica_metricas_legibilidad.png", x=30, w=150)

pdf.ln(10)
pdf.cell(0, 10, "Evaluacion de presencia de IA:", ln=True)
for k, v in resultado_turnitin.items():
    pdf.cell(0, 10, f"{k.replace('_', ' ').capitalize()}: {v}", ln=True)

pdf.ln(5)
pdf.image("grafica_ia.png", x=30, w=150)

pdf_output = "informe_texto_IA_completo.pdf"
pdf.output(pdf_output)
files.download(pdf_output)